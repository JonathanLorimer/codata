name: codata
version: 0.1.0
synopsis: "Exploration of codata and abstraction in haskell"
description: "How does flipping an arrow and adding an existential type change our programs?"
maintainer: Jonathan Lorimer
github: jonathanlorimer/codata-example
category: Codata

ghc-options:
  - -Weverything
  - -Wno-missing-exported-signatures # missing-exported-signatures turns off the more strict -Wmissing-signatures. See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-export-lists # Requires explicit export lists for every module, a pain for large modules
  - -Wno-missing-import-lists # Requires explicit imports of _every_ function (e.g. '$'); too strict
  - -Wno-missed-specialisations # When GHC can't specialize a polymorphic function. No big deal and requires fixing underlying libraries to solve.
  - -Wno-all-missed-specialisations # See missed-specialisations
  - -Wno-unsafe # Don't use Safe Haskell warnings
  - -Wno-safe # Don't use Safe Haskell warnings
  - -Wno-missing-safe-haskell-mode
  - -Wno-prepositive-qualified-module # Don't use prepositive qualified warnings
  - -Wno-missing-local-signatures # Warning for polymorphic local bindings. Don't think this is an issue
  - -Wno-monomorphism-restriction # Don't warn if the monomorphism restriction is used
  - -Wno-missing-deriving-strategies # remove at a later date
  - -fdiagnostics-color=always # Enable color when we upgrade to GHC 8.2
  - +RTS -A128m -n2m -RTS # See docs/compilation-speed.md.

dependencies:
  - base >= 4.9 && < 5

default-extensions:
  - LambdaCase
  - OverloadedStrings
  - ScopedTypeVariables
  - TupleSections
  - MultiWayIf
  - InstanceSigs
  - ConstraintKinds
  - NoImplicitPrelude
  - BlockArguments

library:
  source-dirs: src
  other-modules: []

executables:
  codata:
    main: Main.hs
    source-dirs: app
    dependencies:
    - codata
